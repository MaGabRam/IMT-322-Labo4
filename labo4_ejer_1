#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_memmap.h"
#include "driverlib/debug.h"
#include "driverlib/gpio.h"
#include "driverlib/sysctl.h"
#include "driverlib/timer.h"
#include "driverlib/interrupt.h"

//*****************************************************************************
//
// The error routine that is called if the driver library encounters an error.
//
//*****************************************************************************
#ifdef DEBUG
void
__error__(char *pcFilename, uint32_t ui32Line)
{
    while(1);
}
#endif

//*****************************************************************************
//
// Programa principal
//
uint32_t loadValue = 120000000*5;
void timer0A_handler(void);
uint8_t switch_state = 0;
uint32_t button = 0;


//*****************************************************************************
int main(void)
{

    // Configura el reloj del sistema a 120 MHz
    SysCtlClockFreqSet((SYSCTL_XTAL_25MHZ | SYSCTL_OSC_MAIN | SYSCTL_USE_PLL | SYSCTL_CFG_VCO_480), 120000000);

    //Enable peripherals
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPION);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOJ);
    while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPION)) { }
    GPIOPinTypeGPIOOutput(GPIO_PORTN_BASE, GPIO_PIN_1);
   
    //Enable Timer Peripheral
    SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER0);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER1);
    while(!SysCtlPeripheralReady(SYSCTL_PERIPH_TIMER0)) { }

    //Set timer
    TimerConfigure(TIMER0_BASE, TIMER_CFG_PERIODIC);

    //Set the cout time for Timer
    TimerLoadSet(TIMER0_BASE, TIMER_A, loadValue);

    //Enable processor interrupts
    IntMasterEnable();

    //Enable Interrupt
    IntEnable(35);

    //Enable timer A interrupt
    TimerIntEnable(TIMER0_BASE, TIMER_TIMA_TIMEOUT);

    //Enable the timer
    TimerEnable(TIMER0_BASE, TIMER_A);

    // pines PN0 y PN1 como salidas
    GPIOPinTypeGPIOOutput(GPIO_PORTN_BASE, GPIO_PIN_0 | GPIO_PIN_1);

//   --------------------------------------------------------------------- //







while(1)
{
    // Aquí tu programa principal puede hacer otras cosas,
    // mientras el LED parpadea en la interrupción.
}
return 0;
}




// =========================================================
void timer0A_handler(void)
{
    // Limpiamos la interrupciónls
    TimerIntClear(TIMER0_BASE, TIMER_TIMA_TIMEOUT);// TIMER0_BASE es la dirección base del periférico Timer0.
                                                 // TIMER_TIMA_TIMEOUT es la bandera específica que se está limpiando 
                                                 // (la interrupción por timeout del Timer A

    // Leemos el pin actual
    uint8_t x = GPIOPinRead(GPIO_PORTN_BASE, GPIO_PIN_1); // lee y gaurda en x

    // Si está encendido, lo apagamos; si está apagado, lo encendemos
    if (x)
    {
        // Apaga PN1
        GPIOPinWrite(GPIO_PORTN_BASE, GPIO_PIN_1, 0x00);
    }
    else
    {
        // Enciende PN1
        GPIOPinWrite(GPIO_PORTN_BASE, GPIO_PIN_1, GPIO_PIN_1);
    }
}
   
